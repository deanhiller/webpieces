plugins {
    id 'java-library'
    id 'jacoco' //code coverage
    id 'eclipse'
    id 'idea'
    id 'signing'
    id 'maven-publish'
}

group = 'org.webpieces.server.templates'

apply from: '../../../../config/global.gradle'

//This file is used when we build the whole webpieces project AND is not part of template generation

publishing.publications.mavenJava.pom.description='fake project used in testing.  ignore this jar'

sourceSets {
    main {
        resources {
            srcDirs += ["src/main/java"]
            excludes = ["logback.xml"]
        }
    }
}


//Intellij Idea has a weird quirk we need to avoid
if (System.getProperty('idea.active')) {

    // to have classes and resources in the same output directory
    idea {
        module {
            outputDir file("out/production/classes")
        }
    }
}

dependencies {
    api 'org.webpieces.server:http-webserver'
    //we start people off with the hibernate plugin
    implementation 'org.webpieces.server.plugin:plugin-hibernate'
    implementation 'org.webpieces.server.plugin:plugin-json-jackson'
    implementation 'org.webpieces.server.plugin:plugin-backend'
    implementation 'org.webpieces.server.plugin:plugin-install-sslcert'
    implementation 'org.webpieces.server.plugin:plugin-properties'
    implementation 'org.webpieces.cloud:generate-httpclient'
    implementation 'org.webpieces.cloud:server-scaffolding'
    implementation libs.slf4j.api

    implementation libs.apache.commons.lang3
    implementation libs.jakarta.validation.api

    testImplementation 'org.webpieces.core:core-ddl'
    testImplementation 'org.webpieces.core:core-mock'
    testImplementation 'org.webpieces.server.plugin:plugin-h2db'
    testImplementation 'org.webpieces.server:http-webserver-test'
    testImplementation libs.selenium
}

//NOTE: jar section has to go AFTER dependencies section to read all dependencies
jar {
    manifest.attributes(
            "Class-Path": configurations.runtimeClasspath.files.collect { it.name }.join(' '),
            "Main-Class": 'webpiecesxxxxxpackage.Server'
    )
}

compileJava.doLast {
   logger.warn("processed resources="+sourceSets.main.output.resourcesDir)
}

test {
    if (!project.hasProperty('includeSelenium')) {
        exclude '**/*Selenium*'
    }
}

tasks.whenTaskAdded {task ->
    if(task.name.toLowerCase().contains("sonatype")) {
        task.enabled = false
    }
}

publish.onlyIf { false }
if(project.hasProperty('projVersion')) {
    publishMavenJavaPublicationToSonatypeRepository.onlyIf {false}
}