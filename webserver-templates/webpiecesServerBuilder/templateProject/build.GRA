plugins {
   id 'org.barfuin.gradle.taskinfo' version '1.0.5' // This prints out a task tree (pretty print)
}

//NOTE: There is a picture on https://docs.gradle.org/current/userguide/java_plugin.html as to the default gradle targets for the java
//and here we modify that picture a little so that jar depends on compileHtml so that compiled html files end up in the production jar
//file.  The dev-server does not have this since it relies on the source files to begin with recompiling when changes happen

ext {

    /*
     * Dependencies can be named so that sub-projects can reference consistent version of them.
     * dependencies {
     *     compile deps['joda-time']
     * }
     *
     * This list is NOT who you depend on but just a Map of String, String...
     */
    deps = [
       'web-webserver':      "org.webpieces:http-webserver:${webpiecesVersion}",
       'web-webserver-test': "org.webpieces:http-webserver-test:${webpiecesVersion}",
       'web-devrouter':      "org.webpieces:http-router-dev:${webpiecesVersion}",
       'web-devtemplating':  "org.webpieces:http-templating-dev:${webpiecesVersion}",
       'core-mock':          "org.webpieces:core-mock:${webpiecesVersion}",
       'core-ddl':           "org.webpieces:core-ddl:${webpiecesVersion}",
       'plugin-hibernate':   "org.webpieces:plugin-hibernate:${webpiecesVersion}",
       'plugin-backend':     "org.webpieces:plugin-backend:${webpiecesVersion}",
       'plugin-install-sslcert': "org.webpieces:plugin-install-sslcert:${webpiecesVersion}", 
       'plugin-webpieces-documentation': "org.webpieces:plugin-webpieces-documentation:${webpiecesVersion}",
       'plugin-jackson':     "org.webpieces:plugin-json-jackson:${webpiecesVersion}",
       'plugin-properties':  "org.webpieces:plugin-properties:${webpiecesVersion}",
       'commons-lang':       'org.apache.commons:commons-lang3',
       'javax-validation':   'jakarta.validation:jakarta.validation-api',
       'junit':           'junit:junit',
       
       'plugin-h2':          "org.webpieces:plugin-h2db:${webpiecesVersion}",
       'plugin-webpieces-documentation': "org.webpieces:plugin-documentation:${webpiecesVersion}",

       'selenium':        'org.seleniumhq.selenium:selenium-java:2.53.1',
       'h2db':            'com.h2database:h2:1.4.192',
       //These next two are in case you have libraries that want to use an
       //http-client or a nio library...
       //'web-channelmgr':  "org.webpieces:core-channelmanager2:${webpiecesVersion}",
       //'web-httpclient':  "org.webpieces:http-client:${webpiecesVersion}",
       //'groovy':          'org.codehaus.groovy:groovy-all',
       //'guava':           'com.google.guava:guava:19.0',
       //'apache-commons-io': 'org.apache.commons:commons-io:1.3.2'

       'hikari-cp':     'org.hibernate:hibernate-hikaricp:5.4.10.Final'

    ]  
}

allprojects {
   apply plugin: 'jacoco' //code coverage

   repositories {
       mavenCentral()
       maven { url uri('/tmp/myRepo/') }
   }

   jacoco {
      toolVersion = '0.8.7'
   }
}

subprojects {
   apply plugin: 'java'
   apply plugin: 'checkstyle'
   apply plugin: 'eclipse'
   apply plugin: 'idea'

   //These 2 lines make it so you don't have to use @Param annotation on 
   //every controller method which can get quite annoying.  Instead, webpieces
   //will just use reflection to grab the param names which is just as fast as 
   //annotations
   [compileJava, compileTestJava]*.options.collect {options ->
     options.compilerArgs.add '-parameters'

     //For windows only, IF you type chinese characters or other into a java file for
     //testing, it will FAIL UNLESS you have this so I sneak this in for you
     options.encoding = 'UTF-8'
   }

   project.ext.fixedLibDir = file('lib')
   project.ext.stagingDir = file('staging')
   project.ext.toStagingDir = file(new File(buildDir, 'alljars'))

   checkstyle {
       configFile = rootProject.file('config/checkstyle.xml')
   }

   dependencies {

       //add global dependencies for all projects here....
       //compile deps['some jar from the above map of defined jars and versions']

       //This line includes any jars a developer drops into {project}/lib directory
       compile fileTree(dir: 'lib', include: '*.jar')

       testImplementation 'junit:junit'

        constraints {

            implementation 'io.micrometer:micrometer-core:1.6.5'
            implementation 'jakarta.annotation:jakarta.annotation-api:[1.3.5,2)'
            implementation 'jakarta.inject:jakarta.inject-api:[1.0.3,2)'
            implementation 'jakarta.persistence:jakarta.persistence-api:[2.2.3,3)'
            implementation 'jakarta.validation:jakarta.validation-api:[2.0.1,3)'
            implementation 'org.apache.commons:commons-lang3:3.12.0'
            implementation 'org.codehaus.groovy:groovy-all:3.0.7'

            testImplementation 'junit:junit:4.13.2'

        }

   }

   configurations.all {

       resolutionStrategy {

           dependencySubstitution {
               substitute module('javax.annotation:javax.annotation-api') with module('jakarta.annotation:jakarta.annotation-api:1.3.5')
               substitute module('javax.inject:javax.inject') with module('jakarta.inject:jakarta.inject-api:1.0.3')
               substitute module('javax.persistence:javax.persistence-api') with module('jakarta.persistence:jakarta.persistence-api:2.2.3')
               substitute module('javax.validation:validation-api') with module('jakarta.validation:jakarta.validation-api:2.0.2')
           }

           eachDependency { DependencyResolveDetails details ->

               if(details.requested.group == 'com.google.guava' && details.requested.version.contains('android')) {
                   details.useVersion details.requested.version.replace('android', 'jre')
                   details.because 'we want the JRE version of Guava'
               }

           }

       }
   }

   //This copies new jars over from ivy/maven and project/lib and finally our built up jar so all jars are in
   //one output directory AND it deletes jars in there that are no longer part of any of those locations as well since
   //it is a task of type: Sync
   task syncJars(type: Sync, dependsOn: 'jar') {
       from(configurations.compile) {}
       from(fixedLibDir) {}
       from(libsDir) {}
       into toStagingDir
   }

   assemble.dependsOn('syncJars')

   test{
      beforeTest{ descr ->
        logger.warn("Starting Test ${descr.className} : ${descr.name}")
      }
      afterTest { descr, result ->
        def totalTime = result.endTime - result.startTime
        logger.warn("Test complete ${descr.className} : ${descr.name} TOTAL TIME=${totalTime}")
      }
      testLogging {
        events "failed"
        exceptionFormat "full"
      } 

      systemProperty "gradle.running", "true"
   }

    jacocoTestReport {
        additionalSourceDirs.setFrom files(sourceSets.main.allSource.srcDirs)
        sourceDirectories.setFrom files(sourceSets.main.allSource.srcDirs)
        classDirectories.setFrom files(sourceSets.main.output)
        reports {
            html.enabled = true
            xml.enabled = true
            csv.enabled = false
        }
    }

    jacocoTestReport.dependsOn test
    check.dependsOn jacocoTestReport
}

task codeCoverage(type: org.gradle.testing.jacoco.tasks.JacocoReport) {
    dependsOn = subprojects.test
    additionalSourceDirs.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    sourceDirectories.setFrom files(subprojects.sourceSets.main.allSource.srcDirs)
    classDirectories.setFrom  files(subprojects.sourceSets.main.output)
    executionData.setFrom files(subprojects.jacocoTestReport.executionData)
    reports {
        html.enabled = true
        xml.enabled = true
        csv.enabled = false
    }
    onlyIf = {
        true
    }
    doFirst {
        executionData.setFrom files(executionData.findAll {
            it.exists()
        })
    }
}

//we don't do java plugin on top level on purpose as it is not a java
//project BUT we need build and clean to work inline with the java projects
task build(dependsOn: ':codeCoverage')

task clean {
   description= "Deletes ${buildDir}"
   doLast {
    delete "${buildDir}"
   }
}
