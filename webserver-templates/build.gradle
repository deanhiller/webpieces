plugins {
    id 'java-library'
    id 'checkstyle'
    id 'jacoco' //code coverage
    id 'eclipse'
    id 'idea'
    id 'signing'
    id 'maven-publish'
    id "io.github.humblerookie.gradle" version "0.5.0"
}

apply from: '../config/global.gradle'

//gradle.includedBuilds.each( { build ->
//    System.out.println("build="+build.name)
////    tasks.create(taskName) { task ->
////        dependsOn gradle.includedBuild(build.name).task(":$taskName")
////    }
//})

dependencies {
    implementation deps['http-webserver']
    implementation deps['template1-production']
    implementation deps['template1-development']
}

project.ext {
    archiveFilePath = "webserver-templates/build/distributions/webpiecesServerBuilder-${version}.zip"
  stagingDirName = 'webpiecesServerBuilder'
  outputStagingDir = new File(buildDir, stagingDirName)
}

task stageTemplate(type: Copy) {
    dependsOn gradle.includedBuild('http-webserver').task(':build')

    from '.'
    into buildDir
    include stagingDirName + '/**'
    include stagingDirName + '/.gitignore'
    exclude stagingDirName + '/build'
    exclude stagingDirName + '/.classpath'
    exclude stagingDirName + '/.project'
    exclude stagingDirName + '/.settings'
    exclude stagingDirName + '/build.gradle.template'
    exclude stagingDirName + '/bin'
    exclude stagingDirName + '/templateProject/bin'
    exclude stagingDirName + '/templateProject/.classpath'
    exclude stagingDirName + '/templateProject/.project'
    exclude stagingDirName + '/templateProject/.settings'
    exclude stagingDirName + '/templateProject/build'
    exclude stagingDirName + '/templateProject/production/build.gradle'
    exclude stagingDirName + '/templateProject/production/settings.gradle'
    exclude stagingDirName + '/templateProject/production/build'
    exclude stagingDirName + '/templateProject/production/out'
    exclude stagingDirName + '/templateProject/production/bin'
    exclude stagingDirName + '/templateProject/production/eclipse-output'
    exclude stagingDirName + '/templateProject/production/.classpath'
    exclude stagingDirName + '/templateProject/production/.project'
    exclude stagingDirName + '/templateProject/production/.settings'
    exclude stagingDirName + '/templateProject/production/.gradle'
    exclude stagingDirName + '/templateProject/development/build.gradle'
    exclude stagingDirName + '/templateProject/development/settings.gradle'
    exclude stagingDirName + '/templateProject/development/build'
    exclude stagingDirName + '/templateProject/development/out'
    exclude stagingDirName + '/templateProject/development/bin'
    exclude stagingDirName + '/templateProject/development/webpiecesCache'
    exclude stagingDirName + '/templateProject/development/eclipse-output'
    exclude stagingDirName + '/templateProject/development/.classpath'
    exclude stagingDirName + '/templateProject/development/.project'
    exclude stagingDirName + '/templateProject/development/.settings'
    exclude stagingDirName + '/templateProject/development/.gradle'
}

task copyGradleTemplate(type: Copy, dependsOn: 'stageTemplate') {
    from stagingDirName
    into outputStagingDir
    include 'build.gradle.template'
    rename { file -> 'build.gradle' }
    expand(version: version, title: 'ProjectInfo')
    outputs.upToDateWhen { false }
}

task zipGradleTemplate(type: Zip, dependsOn: 'copyGradleTemplate') {
   from buildDir
   include stagingDirName + "/**"
   archiveBaseName.set stagingDirName
}

assemble.dependsOn(['zipGradleTemplate'])

github {
  owner = 'deanhiller'
  repo = 'webpieces'
  token = project.hasProperty("githubToken") ? githubToken : "fake"
  tagName = version
  name = 'webpiecesServerBuilder'+version
  body = 'Official Release of '+version
  assets = [
      "${archiveFilePath}"
  ]
}

githubRelease {
    dependsOn ':assemble'
    doFirst {
       println("Releasing to GitHub: " + github.assets +" file=${archiveFilePath}")
    }
}

tasks.whenTaskAdded {task ->
    if(task.name.toLowerCase().contains("sonatype")) {
        task.enabled = false
    }
}

tasks.whenTaskAdded {task ->
    if(task.name.toLowerCase().contains("sonatype")) {
        task.enabled = false
    }
}

publish.onlyIf { false }
if(project.hasProperty('projVersion')) {
    publishMavenJavaPublicationToSonatypeRepository.onlyIf {false}
}
